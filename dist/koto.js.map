{"version":3,"sources":["koto.js"],"names":[],"mappings":"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","file":"koto.js","sourcesContent":["import kotoAssert from './assert.js';\nimport Chart from './chart.js';\nimport Layer from './layer.js';\n\n/**\n * d3.js is a required dependancy.\n * @todo I should probably check a version number here.\n */\nkotoAssert(d3, 'd3.js is required');\n\n/**\n * Registry {@link Chart} defintions to be used later.\n * @class\n *\n * @param {Class} Options The Options class.\n * @param {Class} Layer The Layer class.\n * @param {Class} Chart The Chart class.\n */\nclass Koto {\n  constructor(Layer, Chart) {\n    this._registry = {};\n\n    this.Layer = Layer;\n    this.Chart = Chart;\n  }\n\n  /**\n   * Takes a name and a function that returns a chart definiion (class).\n   * It registeres that chart defintion with given name and makes it available\n   * to the `d3.seletion.chart` method.\n   *\n   * If function is called with no parameters, the list of registered charts is\n   * returned.\n   *\n   * If the function is only called with 'name' parameter, the chart definition\n   * registered with that name is returned.\n   *\n   * If the function is called with 'name' and 'classFn' parameter, the chart\n   * definition is registered (or overwritten) with the given name.\n   *\n   * @param  {string} name Name of chart to get or register.\n   * @param  {function} classFn A function that returns a chart.\n   * @return {Chart} The chart registered with given name (if any).\n   */\n  chart(name, classFn) {\n    var baseChart;\n    if (arguments.length === 0) {\n      return this._registry;\n    } else if (arguments.length === 1) {\n      baseChart = this._registry[name];\n      kotoAssert(baseChart, `no chart registered with name ${name}`);\n      return baseChart;\n    } else {\n      this._registry[name] = classFn(this.Chart);\n      return this._registry[name];\n    }\n  }\n}\n\nvar koto = new Koto(Layer, Chart);\n\n/**\n * d3.js extensions\n */\n\n/**\n * Instantiate a chart or return the chart that the current selection belongs\n * to.\n *\n * @param {String} [chartName] The name of the chart to instantiate. If the\n *        name is unspecified, this method will return the chart that the\n *        current selection belongs to.\n * @param {mixed} options The options to use when instantiated the new chart.\n *        See {@link Chart} for more information.\n */\nd3.selection.prototype.chart = function(chartName) {\n\t// Without an argument, attempt to resolve the current selection's\n\t// containing d3.chart.\n  if (arguments.length === 0) {\n    return this._chart;\n  }\n  var ChartCtor = koto.chart(chartName);\n  return new ChartCtor(this);\n};\n\n// Implement the zero-argument signature of `d3.selection.prototype.chart`\n// for all selection types.\nd3.selection.enter.prototype.chart = function() {\n  return this._chart;\n};\nd3.transition.prototype.chart = d3.selection.enter.prototype.chart;\n\n/**\n * Create a new layer on the d3 selection from which it is called.\n *\n * @static\n *\n * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n *        constructor}\n * @returns {d3.selection}\n */\nd3.selection.prototype.layer = function(options) {\n\tvar layer = new Layer(this);\n\tvar eventName;\n\n\t// Set layer methods (required)\n\tlayer.dataBind = options.dataBind;\n\tlayer.insert = options.insert;\n\n\t// Bind events (optional)\n\tif ('events' in options) {\n\t\tfor (eventName in options.events) {\n\t\t\tlayer.on(eventName, options.events[eventName]);\n\t\t}\n\t}\n\n\t// Mix the public methods into the D3.js selection (bound appropriately)\n\tthis.on = function() { return layer.on.apply(layer, arguments); };\n\tthis.off = function() { return layer.off.apply(layer, arguments); };\n\tthis.draw = function() { return layer.draw.apply(layer, arguments); };\n\n\treturn this;\n};\n\nexport default koto;\n"],"sourceRoot":"/source/"}