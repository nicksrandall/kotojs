{"version":3,"sources":["chart.js"],"names":[],"mappings":"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","file":"chart.js","sourcesContent":["import kotoAssert from './assert.js';\n\n/**\n * Create a koto chart\n *\n * @constructor\n *\n * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n *        contain any nodes that the chart generates.\n */\nclass Chart {\n  constructor(selection) {\n    this.base = selection; // Container for chart @type {d3.selection}.\n      this.hasDrawn = false; // Has this chart been drawn at lease once?\n\n      // private\n      this._layers = {};\n      this._attached = {};\n      this._events = {};\n      this._configs = {};\n      this._accessors = {};\n  }\n\n  /**\n   * A \"hook\" method that you may define to modify input data before it is used\n   * to draw the chart's layers and attachments. This method will be used by all\n   * sub-classes.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {Array} data Input data provided to @link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  transform(data) { return data; }\n\n  /**\n   * A \"hook\" method that you may define to choose which mutation of the input\n   * data is sent to which of the attached charts (by name). This method will\n   * be used by all sub-classes. This only applies to charts that use the\n   * {@link Chart#attach} method.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n   * @param {Array} data Input data provided to {@link Chart#draw}.\n   * @returns {mixed} Data to be used in drawing the chart's layers and\n   *                  attachments.\n   */\n  demux(name, data) { return data; }\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code before\n   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  preDraw() {}\n\n  /**\n   * A \"hook\" method that will allow you to run some arbitrary code after\n   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n   *\n   * Note: you will most likely never call this method directly, but rather\n   * include it as part of a chart definition, and then rely on d3.chart to\n   * invoke it when you draw the chart with {@link Chart#draw}.\n   *\n   * @param  {[type]} data [description]\n   * @return {[type]}      [description]\n   */\n  postDraw() {}\n\n  /**\n   * Remove a layer from the chart.\n   *\n   * @param {String} name The name of the layer to remove.\n   * @returns {Layer} The layer removed by this operation.\n   */\n  unlayer(name) {\n    var layer = this.layer(name);\n\n    delete this._layers[name];\n    delete layer._chart;\n\n    return layer;\n  }\n\n  /**\n   * Interact with the chart's {@link Layer|layers}.\n   *\n   * If only a `name` is provided, simply return the layer registered to that\n   * name (if any).\n   *\n   * If a `name` and `selection` are provided, treat the `selection` as a\n   * previously-created layer and attach it to the chart with the specified\n   * `name`.\n   *\n   * If all three arguments are specified, initialize a new {@link Layer} using\n   * the specified `selection` as a base passing along the specified `options`.\n   *\n   * The {@link Layer.draw} method of attached layers will be invoked\n   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n   * data (optionally modified by the chart's {@link Chart#transform} method.\n   *\n   * @param {String} name Name of the layer to attach or retrieve.\n   * @param {d3.selection|Layer} [selection] The layer's base or a\n   *        previously-created {@link Layer}.\n   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n   *        constructor}\n   *\n   * @returns {Layer}\n   */\n  layer(name, selection, options) {\n    var layer;\n\n    if (arguments.length === 1) {\n      return this._layers[name];\n    }\n\n    // we are reattaching a previous layer, which the\n    // selection argument is now set to.\n    if (arguments.length === 2) {\n\n      if (typeof selection.draw === 'function') {\n        selection._chart = this;\n        this._layers[name] = selection;\n        return this._layers[name];\n\n      } else {\n        kotoAssert(false, 'When reattaching a layer, the second argument '+\n          'must be a d3.chart layer');\n      }\n    }\n\n    layer = selection.layer(options);\n\n    this._layers[name] = layer;\n\n    selection._chart = this;\n\n    return layer;\n  }\n\n  /**\n   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n   * method will be invoked whenever the containing chart's `draw` method is\n   * invoked.\n   *\n   * @param {String} attachmentName Name of the attachment\n   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n   *        unspecified, this method will return the attachment previously\n   *        registered with the specified `attachmentName` (if any).\n   *\n   * @returns {Chart} Reference to this chart (chainable).\n   */\n  attach(attachmentName, chart) {\n    if (arguments.length === 1) {\n      return this._attached[attachmentName];\n    }\n\n    this._attached[attachmentName] = chart;\n    return chart;\n  }\n\n  /**\n   * Update the chart's representation in the DOM, drawing all of its layers and\n   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n   *\n   * Note: The first time you call this method, the property `hasDrawn` will be\n   * set to true. This is helpful if you want to only run some code on the first\n   * time the chart is drawn.\n   *\n   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n   *        this cart's {@link Layer|layers} (if any) and the {@link\n   *        Chart#draw|draw method} of this chart's attachments (if any).\n   */\n  draw(rawData) {\n\n    var layerName, attachmentName, attachmentData;\n\n    var data = this.transform(rawData);\n\n    this.preDraw(data);\n\n    for (layerName in this._layers) {\n      this._layers[layerName].draw(data);\n    }\n\n    for (attachmentName in this._attached) {\n      if (this.demux) {\n        attachmentData = this.demux(attachmentName, data);\n      } else {\n        attachmentData = data;\n      }\n      this._attached[attachmentName].draw(attachmentData);\n    }\n\n    this.hasDrawn = true;\n\n    this.postDraw(data);\n  }\n\n  /**\n   * Function invoked with the context specified when the handler was bound (via\n   * {@link Chart#on} {@link Chart#once}).\n   *\n   * @callback ChartEventHandler\n   * @param {...*} arguments Invoked with the arguments passed to {@link\n   *         Chart#trigger}\n   */\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. See {@link\n   * Chart#once} to subscribe a callback function to an event for one occurence.\n   *\n   * @externalExample {runnable} chart-on\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  on(name, callback, context) {\n    var events = this._events[name] || (this._events[name] = []);\n    events.push({\n      callback: callback,\n      context: context || this,\n      _chart: this\n    });\n    return this;\n  }\n\n  /**\n   * Subscribe a callback function to an event triggered on the chart. This\n   * function will be invoked at the next occurance of the event and immediately\n   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n   * event indefinitely.\n   *\n   * @externalExample {runnable} chart-once\n   *\n   * @param {String} name Name of the event\n   * @param {ChartEventHandler} callback Function to be invoked when the event\n   *        occurs\n   * @param {Object} [context] Value to set as `this` when invoking the\n   *        `callback`. Defaults to the chart instance\n   *\n   * @returns {Chart} A reference to this chart (chainable)\n   */\n  once(name, callback, context) {\n    var self = this;\n    var once = function() {\n      self.off(name, once);\n      callback.apply(this, arguments);\n    };\n    return this.on(name, once, context);\n  }\n\n  /**\n   * Unsubscribe one or more callback functions from an event triggered on the\n   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n   * When only a `name` is specified, all handlers subscribed to that event will\n   * be unsubscribed. When a `name` and `callback` are specified, only that\n   * function will be unsubscribed from that event. When a `name` and `context`\n   * are specified (but `callback` is omitted), all events bound to the given\n   * event with the given context will be unsubscribed.\n   *\n   * @externalExample {runnable} chart-off\n   *\n   * @param {String} [name] Name of the event to be unsubscribed\n   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n   * @param {Object} [context] Contexts to be unsubscribe\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  off(name, callback, context) {\n    var names, n, events, event, i, j;\n\n    // remove all events\n    if (arguments.length === 0) {\n      for (name in this._events) {\n        this._events[name].length = 0;\n      }\n      return this;\n    }\n\n    // remove all events for a specific name\n    if (arguments.length === 1) {\n      events = this._events[name];\n      if (events) {\n        events.length = 0;\n      }\n      return this;\n    }\n\n    // remove all events that match whatever combination of name, context\n    // and callback.\n    names = name ? [name] : Object.keys(this._events);\n    for (i = 0; i < names.length; i++) {\n      n = names[i];\n      events = this._events[n];\n      j = events.length;\n      while (j--) {\n        event = events[j];\n        if ((callback && callback === event.callback) ||\n            (context && context === event.context)) {\n          events.splice(j, 1);\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Publish an event on this chart with the given `name`.\n   *\n   * @externalExample {runnable} chart-trigger\n   *\n   * @param {String} name Name of the event to publish\n   * @param {...*} arguments Values with which to invoke the registered\n   *        callbacks.\n   *\n   * @returns {Chart} A reference to this chart (chainable).\n   */\n  trigger(name) {\n    var args = Array.prototype.slice.call(arguments, 1);\n    var events = this._events[name];\n    var i, ev;\n\n    if (events !== undefined) {\n      for (i = 0; i < events.length; i++) {\n        ev = events[i];\n        ev.callback.apply(ev.context, args);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Get and set chart options (or configs)\n   *\n   * @param  {mixed} nameOrObject name of item getting or setting\n   *                              or its an object with key value pairs.\n   * @param  {mixed} value the value for config item witha that name.\n   * @return {mixed} if getting, its the value. if setting it is the chart instance.\n   */\n  config(nameOrObject, value) {\n    var key;\n    if (arguments.length === 0) {\n      return this._configs;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof nameOrObject === 'object') {\n        for (key in nameOrObject) {\n          this._configs[key] = nameOrObject[key];\n        }\n        return this;\n      }\n      kotoAssert(this._configs[nameOrObject], `${nameOrObject} is not a valid option.`);\n      return this._configs[nameOrObject];\n    }\n\n    if(arguments.length === 2) {\n      this._configs[nameOrObject] = value;\n      return this;\n    }\n  }\n\n  /**\n   * This will get or set any of the chart's accessors.\n   *\n   * @param  {String or Object} item If string, it will return the function for that accessor item.\n   *                                 If object, it will update that accessor with set function.\n   * @param  {function} [value] The function to update accessor item with.\n   * @return {object} The chart to preserve chainability.\n   */\n  accessor (item, value) {\n    var key;\n    if (arguments.length === 0) {\n      return this._accessors;\n    }\n\n    if (arguments.length === 1) {\n      if (typeof item === 'string') {\n        kotoAssert(this._accessors[item], `${item} is not a valid accessor.`);\n        if (typeof this._accessors[item] === 'object') {\n          return this._accessors[item].accessor;\n        }\n        return this._accessors[item];\n      } else {\n        for (key in item) {\n          if (this._accessors[key]) {\n            this._accessors[key] = item[key];\n          } else {\n            console.warn(`${key} is not a valid accessor.`);\n          }\n        }\n      }\n    } else {\n      this._accessors[item] = value;\n    }\n    return this;\n  }\n}\n\nexport default Chart;\n"],"sourceRoot":"/source/"}