{"version":3,"file":"koto.js","sources":["koto.js","/source/koto.js"],"names":["global","factory","exports","module","require","define","amd","Koto","d3","this","kotoAssert","test","message","Error","assert_js","Layer","base","options","_base","_handlers","_lifecycleRe","dataBind","insert","eventName","events","on","handler","push","callback","chart","idx","handlers","arguments","length","splice","data","endall","transition","n","size","each","apply","promiseCallback","resolve","selection","call","bound","entering","method","len","tidx","tlen","promises","enter","_chart","name","exit","i","l","empty","Promise","promise","all","layer_js","Chart","baseExtend","dst","maps","setDst","value","key","set","ii","map","forEach","hasDrawn","merge","configs","merged","bind","accessors","Map","_layers","_attached","_events","c","config","a","accessor","layer","_layer","_Chart","get","remove","attachmentName","rawData","attachmentData","transform","preDraw","trigger","_step","_iterator","values","Symbol","iterator","_iteratorNormalCompletion","next","done","draw","_step2","_iterator2","entries","_iteratorNormalCompletion2","_step2$value","attachment","demux","postDraw","then","postTransition","context","has","Set","add","self","_once","off","clear","event","clone","args","Array","_len","_key","_event$callback","concat","nameOrObject","setPercentage","calcultePerecentage","arr","initialValue","min","Math","definition","constrain","percentage","isArray","hasOwnProperty","setter","console","warn","getter","item","init","_ref","_get","Object","getPrototypeOf","prototype","initialize"],"mappings":"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","sourceRoot":"/source/","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :\n\ttypeof define === 'function' && define.amd ? define(['d3'], factory) :\n\tglobal.Koto = factory(global.d3)\n}(this, function (d3) { 'use strict';\n\n\t/**\n\t * Simple Assertion function\n\t * @param  {anything} test    Anything that will evaluate to true of false.\n\t * @param  {string} message The error message to send if `test` is false\n\t */\n\tfunction kotoAssert(test, message) {\n\t  if (test) {\n\t    return;\n\t  }\n\t  throw new Error(`[koto] ${message}`);\n\t}\n\n\tvar assert_js = kotoAssert;\n\n\tclass Layer {\n\t  constructor(base, options) {\n\t    this._base = base;\n\t    this._handlers = {};\n\t    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n\t    if (options) {\n\t      // Set layer methods (required)\n\t      this.dataBind = options.dataBind;\n\t      this.insert = options.insert;\n\n\t      // Bind events (optional)\n\t      if ('events' in options) {\n\t        for (let eventName in options.events) {\n\t          this.on(eventName, options.events[eventName]);\n\t        }\n\t      }\n\t    }\n\t\t}\n\n\t\t/**\n\t\t * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n\t\t * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n\t\t *\n\t\t * @param {Array} data Value passed to {@link Layer#draw}\n\t\t */\n\t\tdataBind() {\n\t\t\tassert_js(false, 'Layers must specify a dataBind method.');\n\t\t}\n\n\t\t/**\n\t\t * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n\t\t * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n\t\t * Layer instances.\n\t\t */\n\t\tinsert() {\n\t\t\tassert_js(false, 'Layers must specify an `insert` method.');\n\t\t}\n\n\t\t/**\n\t\t * Subscribe a handler to a \"lifecycle event\". These events (and only these\n\t\t * events) are triggered when {@link Layer#draw} is invoked--see that method\n\t\t * for more details on lifecycle events.\n\t\t *\n\t\t * @param {String} eventName Identifier for the lifecycle event for which to\n\t\t *        subscribe.\n\t\t * @param {Function} handler Callback function\n\t\t *\n\t\t * @returns {Chart} Reference to the layer instance (chaining).\n\t\t */\n\t\ton(eventName, handler, options) {\n\t\t\toptions = options || {};\n\n\t\t\tassert_js(this._lifecycleRe.test(eventName),\n\t\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\t\tif (!(eventName in this._handlers)) {\n\t\t\t\tthis._handlers[eventName] = [];\n\t\t\t}\n\t\t\tthis._handlers[eventName].push({\n\t\t\t\tcallback: handler,\n\t\t\t\tchart: options.chart || null\n\t\t\t});\n\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unsubscribe the specified handler from the specified event. If no handler is\n\t\t * supplied, remove *all* handlers from the event.\n\t\t *\n\t\t * @param {String} eventName Identifier for event from which to remove\n\t\t *        unsubscribe\n\t\t * @param {Function} handler Callback to remove from the specified event\n\t\t *\n\t\t * @returns {Chart} Reference to the layer instance (chaining).\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tvar handlers = this._handlers[eventName];\n\t\t\tvar idx;\n\n\t\t\tassert_js(this._lifecycleRe.test(eventName),\n\t\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\t\tif (!handlers) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (arguments.length === 1) {\n\t\t\t\thandlers.length = 0;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tfor (idx = handlers.length - 1; idx > -1; --idx) {\n\t\t\t\tif (handlers[idx].callback === handler) {\n\t\t\t\t\thandlers.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Render the layer according to the input data: Bind the data to the layer\n\t\t * (according to {@link Layer#dataBind}, insert new elements (according to\n\t\t * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n\t\t * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n\t\t *\n\t\t * - update\n\t\t * - update:transition\n\t\t * - enter\n\t\t * - enter:transition\n\t\t * - exit\n\t\t * - exit:transition\n\t\t *\n\t\t * @param {Array} data Data to drive the rendering.\n\t\t */\n\t\tdraw(data) {\n\t\t\tvar bound,\n\t\t\t\tentering,\n\t\t\t\tevents,\n\t\t\t\tselection,\n\t\t\t\tmethod,\n\t\t\t\thandlers,\n\t\t\t\teventName,\n\t      idx,\n\t      len,\n\t      tidx,\n\t      tlen,\n\t      promises = [];\n\n\t    function endall(transition, callback) {\n\t      var n = 0;\n\t      if (transition.size() === 0) {\n\t        callback();\n\t      } else {\n\t        transition\n\t          .each(function() {\n\t            ++n;\n\t          })\n\t          .each('interrupt.promise', function () {\n\t            callback.apply(this, arguments);\n\t          })\n\t          .each('end.promise', function () {\n\t            if (!--n) {\n\t              callback.apply(this, arguments);\n\t            }\n\t          });\n\t      }\n\t    }\n\n\t    function promiseCallback (resolve) {\n\t      selection.call(endall, function() {\n\t        resolve(true);\n\t      });\n\t    }\n\n\t\t\tbound = this.dataBind.call(this._base, data);\n\n\t\t\tassert_js(bound instanceof d3.selection,\n\t      'Invalid selection defined by `Layer#dataBind` method.');\n\t\t\tassert_js(bound.enter, 'Layer selection not properly bound.');\n\n\t\t\tentering = bound.enter();\n\t\t\tentering._chart = this._base._chart;\n\n\t\t\tevents = [\n\t\t\t\t{\n\t\t\t\t\tname: 'update',\n\t\t\t\t\tselection: bound\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'enter',\n\t\t\t\t\tselection: entering,\n\t\t\t\t\tmethod: this.insert\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'merge',\n\t\t\t\t\t// Although the `merge` lifecycle event shares its selection object\n\t\t\t\t\t// with the `update` lifecycle event, the object's contents will be\n\t\t\t\t\t// modified when d3.chart invokes the user-supplied `insert` method\n\t\t\t\t\t// when triggering the `enter` event.\n\t\t\t\t\tselection: bound\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'exit',\n\t\t\t\t\t// Although the `exit` lifecycle event shares its selection object\n\t\t\t\t\t// with the `update` and `merge` lifecycle events, the object's\n\t\t\t\t\t// contents will be modified when d3.chart invokes\n\t\t\t\t\t// `d3.selection.exit`.\n\t\t\t\t\tselection: bound,\n\t\t\t\t\tmethod: bound.exit\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tfor (var i = 0, l = events.length; i < l; ++i) {\n\t\t\t\teventName = events[i].name;\n\t\t\t\tselection = events[i].selection;\n\t\t\t\tmethod = events[i].method;\n\n\t\t\t\t// Some lifecycle selections modify shared state, so they must be\n\t\t\t\t// deferred until just prior to handler invocation.\n\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\tselection = method.call(selection);\n\t\t\t\t}\n\n\t\t\t\tif (selection.empty()) {\n\t        continue;\n\t\t\t\t}\n\n\t\t\t\t// Although `selection instanceof d3.selection` is more explicit,\n\t\t\t\t// it fails in IE8, so we use duck typing to maintain\n\t\t\t\t// compatability.\n\n\t\t\t\tassert_js(selection && selection instanceof d3.selection,\n\t        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n\t\t\t\thandlers = this._handlers[eventName];\n\n\t      if (handlers) {\n\t        for (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t          // Attach a reference to the parent chart so the selection\"s\n\t          // `chart` method will function correctly.\n\t          selection._chart = handlers[idx].chart || this._base._chart;\n\t          selection.call(handlers[idx].callback);\n\t        }\n\t      }\n\n\t      handlers = this._handlers[eventName + ':transition'];\n\n\t      if (handlers && handlers.length) {\n\t        selection = selection.transition();\n\t        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n\t          selection._chart = handlers[tidx].chart || this._base._chart;\n\t          selection.call(handlers[tidx].callback);\n\t          promises.push(new Promise(promiseCallback));\n\t        }\n\t      }\n\t      this.promise = Promise.all(promises);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar layer_js = Layer;\n\n\tassert_js(d3, 'd3 js is required.');\n\n\t/**\n\t * Create a koto chart\n\t *\n\t * @constructor\n\t *\n\t * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n\t *        contain any nodes that the chart generates.\n\t */\n\tclass Chart {\n\t  constructor(selection) {\n\t    this.base = selection; // Container for chart @type {d3.selection}.\n\t    this.hasDrawn = false; // Has this chart been drawn at lease once?\n\n\t    function baseExtend(dst, maps) {\n\t      var setDst = function (value, key) {\n\t          dst.set(key, value);\n\t      };\n\t      for (var i = 0, ii = maps.length; i < ii; ++i) {\n\t        var map = maps[i];\n\t        map.forEach(setDst);\n\t      }\n\t      return dst;\n\t    }\n\n\t    this.merge = {\n\t      configs: function(){\n\t        var merged = baseExtend(this.configs, arguments);\n\t        return merged;\n\t      }.bind(this),\n\t      accessors: function(){\n\t        var merged = baseExtend(this.accessors, arguments);\n\t        return merged;\n\t      }.bind(this)\n\t    };\n\n\t    // exposed properties\n\t    this.configs = new Map();\n\t    this.accessors = new Map();\n\t    this.promise = null;\n\n\t    // private\n\t    this._layers = new Map();\n\t    this._attached = new Map();\n\t    this._events = new Map();\n\n\t    // alias\n\t    this.c = this.config;\n\t    this.a = this.accessor;\n\t  }\n\n\t  /**\n\t   * A \"hook\" method that you may define to modify input data before it is used\n\t   * to draw the chart's layers and attachments. This method will be used by all\n\t   * sub-classes.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {Array} data Input data provided to @link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t  transform(data) { return data; }\n\n\t  /**\n\t   * A \"hook\" method that you may define to choose which mutation of the input\n\t   * data is sent to which of the attached charts (by name). This method will\n\t   * be used by all sub-classes. This only applies to charts that use the\n\t   * {@link Chart#attach} method.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n\t   * @param {Array} data Input data provided to {@link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t  demux(name, data) { return data; }\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code before\n\t   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * Note 2: a `postDraw` event is also fired when appropriate;\n\t   *\n\t   * @param  {[type]} data [description]\n\t   * @return {[type]}      [description]\n\t   */\n\t  preDraw() {}\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code after\n\t   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param  {[type]} data [description]\n\t   */\n\t  postDraw() {}\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code after\n\t   * {@link Chart#draw} is called AND after all transitions for all layers\n\t   * and attached charts have been completed. This will run everytime\n\t   * {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * Note 2: a `postTransition` event is also fired when appropriate;\n\t   *\n\t   * @param  {[type]} data\n\t   */\n\t  postTransition() {}\n\n\t  /**\n\t   * Remove a layer from the chart.\n\t   *\n\t   * @param {String} name The name of the layer to remove.\n\t   * @returns {Layer} The layer removed by this operation.\n\t   */\n\t  unlayer(name) {\n\t    var layer = this.layer(name);\n\n\t    this._layers.delete(name);\n\t    delete layer._chart;\n\n\t    return layer;\n\t  }\n\n\t  /**\n\t   * Interact with the chart's {@link Layer|layers}.\n\t   *\n\t   * If only a `name` is provided, simply return the layer registered to that\n\t   * name (if any).\n\t   *\n\t   * If a `name` and `selection` are provided, treat the `selection` as a\n\t   * previously-created layer and attach it to the chart with the specified\n\t   * `name`.\n\t   *\n\t   * If all three arguments are specified, initialize a new {@link Layer} using\n\t   * the specified `selection` as a base passing along the specified `options`.\n\t   *\n\t   * The {@link Layer.draw} method of attached layers will be invoked\n\t   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n\t   * data (optionally modified by the chart's {@link Chart#transform} method.\n\t   *\n\t   * @param {String} name Name of the layer to attach or retrieve.\n\t   * @param {d3.selection|Layer} [selection] The layer's base or a\n\t   *        previously-created {@link Layer}.\n\t   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n\t   *        constructor}\n\t   *\n\t   * @returns {Layer}\n\t   */\n\t  layer(name, selection, options) {\n\t    var _Chart = this;\n\t    var _layer;\n\n\t    if (arguments.length === 1) {\n\t      return this._layers.get(name);\n\t    }\n\n\t    // we are reattaching a previous layer, which the\n\t    // selection argument is now set to.\n\t    if (arguments.length === 2) {\n\n\t      if (selection instanceof layer_js) {\n\t        selection._chart = this;\n\t        this._layers.set(name, selection);\n\t        return this._layers.get(name);\n\n\t      } else {\n\t        assert_js(false, 'When reattaching a layer, the second argument must be a koto layer');\n\t      }\n\t    }\n\n\t    selection._chart = this;\n\n\t    _layer = new layer_js(selection, options);\n\n\t    _layer.remove = function () {\n\t      _Chart._layers.delete(name);\n\t      return this;\n\t    };\n\n\t    this._layers.set(name, _layer);\n\n\t    return _layer;\n\t  }\n\n\t  /**\n\t   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n\t   * method will be invoked whenever the containing chart's `draw` method is\n\t   * invoked.\n\t   *\n\t   * @param {String} attachmentName Name of the attachment\n\t   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n\t   *        unspecified, this method will return the attachment previously\n\t   *        registered with the specified `attachmentName` (if any).\n\t   *\n\t   * @returns {Chart} Reference to this chart (chainable).\n\t   */\n\t  attach(attachmentName, chart) {\n\t    if (arguments.length === 1) {\n\t      return this._attached.get(attachmentName);\n\t    }\n\n\t    this._attached.set(attachmentName, chart);\n\t    return chart;\n\t  }\n\n\t  /**\n\t   * Update the chart's representation in the DOM, drawing all of its layers and\n\t   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n\t   *\n\t   * Note: The first time you call this method, the property `hasDrawn` will be\n\t   * set to true. This is helpful if you want to only run some code on the first\n\t   * time the chart is drawn.\n\t   *\n\t   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n\t   *        this cart's {@link Layer|layers} (if any) and the {@link\n\t   *        Chart#draw|draw method} of this chart's attachments (if any).\n\t   */\n\t  draw(rawData) {\n\t    var layer, attachmentData, promises = [];\n\n\t    var data = this.transform(rawData);\n\n\t    this.preDraw(data);\n\t    this.trigger('preDraw', data);\n\n\t    for (layer of this._layers.values()) {\n\t      layer.draw(data);\n\t      promises.push(layer.promise);\n\t    }\n\n\t    for (let [attachmentName, attachment] of this._attached.entries()) {\n\t      attachmentData = this.demux ? this.demux(attachmentName, data) : data;\n\t      attachment.draw(attachmentData);\n\t      promises.push(attachment.promise);\n\t    }\n\n\t    this.hasDrawn = true;\n\n\t    this.promise = Promise.all(promises);\n\n\t    this.postDraw();\n\t    this.trigger('postDraw', data);\n\n\t    this.promise.then(function () {\n\t      this.postTransition(data);\n\t      this.trigger('postTransition', data);\n\t    }.bind(this));\n\t  }\n\n\t  /**\n\t   * Function invoked with the context specified when the handler was bound (via\n\t   * {@link Chart#on} {@link Chart#once}).\n\t   *\n\t   * @callback ChartEventHandler\n\t   * @param {...*} arguments Invoked with the arguments passed to {@link\n\t   *         Chart#trigger}\n\t   */\n\n\t  /**\n\t   * Subscribe a callback function to an event triggered on the chart. See {@link\n\t   * Chart#once} to subscribe a callback function to an event for one occurence.\n\t   *\n\t   * @externalExample {runnable} chart-on\n\t   *\n\t   * @param {String} name Name of the event\n\t   * @param {ChartEventHandler} callback Function to be invoked when the event\n\t   *        occurs\n\t   * @param {Object} [context] Value to set as `this` when invoking the\n\t   *        `callback`. Defaults to the chart instance.\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  on(name, callback, context) {\n\t    var events;\n\t    if (this._events.has(name)) {\n\t      events = this._events.get(name);\n\t    } else {\n\t      events = new Set();\n\t    }\n\n\t    events.add({\n\t      callback: callback,\n\t      context: context || this,\n\t      _chart: this\n\t    });\n\n\t    this._events.set(name, events);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Subscribe a callback function to an event triggered on the chart. This\n\t   * function will be invoked at the next occurance of the event and immediately\n\t   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n\t   * event indefinitely.\n\t   *\n\t   * @externalExample {runnable} chart-once\n\t   *\n\t   * @param {String} name Name of the event\n\t   * @param {ChartEventHandler} callback Function to be invoked when the event\n\t   *        occurs\n\t   * @param {Object} [context] Value to set as `this` when invoking the\n\t   *        `callback`. Defaults to the chart instance\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable)\n\t   */\n\t  once(name, callback, context) {\n\t    var self = this;\n\t    var _once = function() {\n\t      self.off(name, _once);\n\t      callback.apply(this, arguments);\n\t    };\n\t    return this.on(name, _once, context);\n\t  }\n\n\t  /**\n\t   * Unsubscribe one or more callback functions from an event triggered on the\n\t   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n\t   * When only a `name` is specified, all handlers subscribed to that event will\n\t   * be unsubscribed. When a `name` and `callback` are specified, only that\n\t   * function will be unsubscribed from that event. When a `name` and `context`\n\t   * are specified (but `callback` is omitted), all events bound to the given\n\t   * event with the given context will be unsubscribed.\n\t   *\n\t   * @externalExample {runnable} chart-off\n\t   *\n\t   * @param {String} [name] Name of the event to be unsubscribed\n\t   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n\t   * @param {Object} [context] Contexts to be unsubscribe\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  off(name, callback, context) {\n\n\t    // remove all events\n\t    if (arguments.length === 0) {\n\t      this._events.clear();\n\t      return this;\n\t    }\n\n\t    // remove all events for a specific name\n\t    if (arguments.length === 1) {\n\t      if (this._events.has(name)) {\n\t        this._events.get(name).clear();\n\t      }\n\t      return this;\n\t    }\n\n\t    // remove all events that match whatever combination of name, context\n\t    // and callback.\n\n\t    this._events.get(name).forEach((event, clone, map) => {\n\t      if ((callback && callback === clone.callback) ||\n\t          (context && context === clone.context)) {\n\t        map.delete(event);\n\t      }\n\t    });\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Publish an event on this chart with the given `name`.\n\t   *\n\t   * @externalExample {runnable} chart-trigger\n\t   *\n\t   * @param {String} name Name of the event to publish\n\t   * @param {...*} arguments Values with which to invoke the registered\n\t   *        callbacks.\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  trigger(name, ...args) {\n\t    if (this._events.has(name)) {\n\t      this._events.get(name).forEach((event) => {\n\t        event.callback.call(event.context, ...args);\n\t      });\n\t    }\n\t    return this;\n\t  }\n\t  /**\n\t   * Get and set chart options (or configs)\n\t   *\n\t   * @param  {mixed} nameOrObject name of item getting or setting\n\t   *                              or its an object with key value pairs.\n\t   * @param  {mixed} value the value for config item witha that name.\n\t   * @return {mixed} if getting, its the value. if setting it is the chart instance.\n\t   */\n\t  config(nameOrObject, value) {\n\t    var key;\n\t    var definition;\n\t    var _Chart = this;\n\n\t    function setPercentage () {\n\t      function calcultePerecentage (arr, initialValue) {\n\t        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\n\t        return initialValue / min;\n\t      }\n\n\t      if (definition.constrain === true) {\n\t        definition.percentage = calcultePerecentage(['width', 'height'], definition.value);\n\t      } else if (Array.isArray(definition.constrain)) {\n\t        definition.percentage = calcultePerecentage(definition.constrain, definition.value);\n\t      } else {\n\t        definition.percentage = calcultePerecentage([definition.constrain], definition.value);\n\t      }\n\t    }\n\n\t    if (arguments.length === 0) {\n\t      return this.configs;\n\t    }\n\n\t    if (arguments.length === 1) {\n\t      if (typeof nameOrObject === 'object') {\n\t        for (key in nameOrObject) {\n\t          if(this.configs.has(key)) {\n\t            definition = this.configs.get(key);\n\t            if (definition.hasOwnProperty('setter')) {\n\t              definition.value = definition.setter.call(definition, nameOrObject[key]);\n\t            } else {\n\t              definition.value = nameOrObject[key];\n\t            }\n\t            if (definition.hasOwnProperty('constrain')) {\n\t              setPercentage();\n\t            }\n\t            this.configs.set(key, definition);\n\t          } else {\n\t            console.warn(`config with name ${nameOrObject} is not defined.`);\n\t          }\n\t        }\n\t        return this;\n\t      }\n\n\t      assert_js(this.configs.has(nameOrObject), `${nameOrObject} is not a valid option.`);\n\t      definition = this.configs.get(nameOrObject);\n\t      if (definition.hasOwnProperty('getter')) {\n\t        return definition.getter.call(definition);\n\t      }\n\t      return definition.value;\n\t    }\n\n\t    if(arguments.length === 2) {\n\t      if (this.configs.has(nameOrObject)) {\n\t        definition = this.configs.get(nameOrObject);\n\t        if (definition.hasOwnProperty('setter')) {\n\t          definition.value = definition.setter.call(definition, value);\n\t        } else {\n\t          definition.value = value;\n\t        }\n\t        if (definition.hasOwnProperty('constrain')) {\n\t          setPercentage();\n\t        }\n\t        this.configs.set(nameOrObject, definition);\n\t      } else {\n\t        console.warn(`config with name ${nameOrObject} is not defined.`);\n\t      }\n\t      return this;\n\t    }\n\t  }\n\n\t  /**\n\t   * This will get or set any of the chart's accessors.\n\t   *\n\t   * @param  {String or Object} item If string, it will return the function for that accessor item.\n\t   *                                 If object, it will update that accessor with set function.\n\t   * @param  {function} [value] The function to update accessor item with.\n\t   * @return {object} The chart to preserve chainability.\n\t   */\n\t  accessor (item, value) {\n\t    var key;\n\t    if (arguments.length === 0) {\n\t      return this.accessors;\n\t    }\n\n\t    if (arguments.length === 1) {\n\t      if (typeof item === 'string') {\n\t        assert_js(this.accessors.has(item), `${item} is not a valid accessor.`);\n\t        return this.accessors.get(item);\n\t      } else {\n\t        for (key in item) {\n\t          this.accessors.set(key, item[key]);\n\t        }\n\t      }\n\t    } else {\n\t      this.accessors.set(item, value);\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * This will extend a chart by passing in an object of initialize function.\n\t   * @param  {Object || function} init Initialize function of object with initialize method.\n\t   * @return {Construtor}      Chart constructor\n\t   */\n\t  static extend(init) {\n\t    class chart extends this {\n\t      constructor(selection) {\n\t        var key;\n\t        super(selection);\n\n\t        if (typeof init === 'function') {\n\t          init.call(this);\n\t        } else {\n\t          for (key in init) {\n\t            this[key] = init[key];\n\t          }\n\t          this.initialize.call(this);\n\t        }\n\n\t      }\n\t    }\n\t    return chart;\n\t  }\n\t}\n\n\tvar _chart = Chart;\n\n\treturn _chart;\n\n}));\n","(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('d3')) :\n\ttypeof define === 'function' && define.amd ? define(['d3'], factory) :\n\tglobal.Koto = factory(global.d3)\n}(this, function (d3) { 'use strict';\n\n\t/**\n\t * Simple Assertion function\n\t * @param  {anything} test    Anything that will evaluate to true of false.\n\t * @param  {string} message The error message to send if `test` is false\n\t */\n\tfunction kotoAssert(test, message) {\n\t  if (test) {\n\t    return;\n\t  }\n\t  throw new Error(`[koto] ${message}`);\n\t}\n\n\tvar assert_js = kotoAssert;\n\n\tclass Layer {\n\t  constructor(base, options) {\n\t    this._base = base;\n\t    this._handlers = {};\n\t    this._lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n\t    if (options) {\n\t      // Set layer methods (required)\n\t      this.dataBind = options.dataBind;\n\t      this.insert = options.insert;\n\n\t      // Bind events (optional)\n\t      if ('events' in options) {\n\t        for (let eventName in options.events) {\n\t          this.on(eventName, options.events[eventName]);\n\t        }\n\t      }\n\t    }\n\t\t}\n\n\t\t/**\n\t\t * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n\t\t * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n\t\t *\n\t\t * @param {Array} data Value passed to {@link Layer#draw}\n\t\t */\n\t\tdataBind() {\n\t\t\tassert_js(false, 'Layers must specify a dataBind method.');\n\t\t}\n\n\t\t/**\n\t\t * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n\t\t * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n\t\t * Layer instances.\n\t\t */\n\t\tinsert() {\n\t\t\tassert_js(false, 'Layers must specify an `insert` method.');\n\t\t}\n\n\t\t/**\n\t\t * Subscribe a handler to a \"lifecycle event\". These events (and only these\n\t\t * events) are triggered when {@link Layer#draw} is invoked--see that method\n\t\t * for more details on lifecycle events.\n\t\t *\n\t\t * @param {String} eventName Identifier for the lifecycle event for which to\n\t\t *        subscribe.\n\t\t * @param {Function} handler Callback function\n\t\t *\n\t\t * @returns {Chart} Reference to the layer instance (chaining).\n\t\t */\n\t\ton(eventName, handler, options) {\n\t\t\toptions = options || {};\n\n\t\t\tassert_js(this._lifecycleRe.test(eventName),\n\t\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\t\tif (!(eventName in this._handlers)) {\n\t\t\t\tthis._handlers[eventName] = [];\n\t\t\t}\n\t\t\tthis._handlers[eventName].push({\n\t\t\t\tcallback: handler,\n\t\t\t\tchart: options.chart || null\n\t\t\t});\n\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Unsubscribe the specified handler from the specified event. If no handler is\n\t\t * supplied, remove *all* handlers from the event.\n\t\t *\n\t\t * @param {String} eventName Identifier for event from which to remove\n\t\t *        unsubscribe\n\t\t * @param {Function} handler Callback to remove from the specified event\n\t\t *\n\t\t * @returns {Chart} Reference to the layer instance (chaining).\n\t\t */\n\t\toff(eventName, handler) {\n\t\t\tvar handlers = this._handlers[eventName];\n\t\t\tvar idx;\n\n\t\t\tassert_js(this._lifecycleRe.test(eventName),\n\t\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\t\tif (!handlers) {\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tif (arguments.length === 1) {\n\t\t\t\thandlers.length = 0;\n\t\t\t\treturn this;\n\t\t\t}\n\n\t\t\tfor (idx = handlers.length - 1; idx > -1; --idx) {\n\t\t\t\tif (handlers[idx].callback === handler) {\n\t\t\t\t\thandlers.splice(idx, 1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn this;\n\t\t}\n\n\t\t/**\n\t\t * Render the layer according to the input data: Bind the data to the layer\n\t\t * (according to {@link Layer#dataBind}, insert new elements (according to\n\t\t * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n\t\t * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n\t\t *\n\t\t * - update\n\t\t * - update:transition\n\t\t * - enter\n\t\t * - enter:transition\n\t\t * - exit\n\t\t * - exit:transition\n\t\t *\n\t\t * @param {Array} data Data to drive the rendering.\n\t\t */\n\t\tdraw(data) {\n\t\t\tvar bound,\n\t\t\t\tentering,\n\t\t\t\tevents,\n\t\t\t\tselection,\n\t\t\t\tmethod,\n\t\t\t\thandlers,\n\t\t\t\teventName,\n\t      idx,\n\t      len,\n\t      tidx,\n\t      tlen,\n\t      promises = [];\n\n\t    function endall(transition, callback) {\n\t      var n = 0;\n\t      if (transition.size() === 0) {\n\t        callback();\n\t      } else {\n\t        transition\n\t          .each(function() {\n\t            ++n;\n\t          })\n\t          .each('interrupt.promise', function () {\n\t            callback.apply(this, arguments);\n\t          })\n\t          .each('end.promise', function () {\n\t            if (!--n) {\n\t              callback.apply(this, arguments);\n\t            }\n\t          });\n\t      }\n\t    }\n\n\t    function promiseCallback (resolve) {\n\t      selection.call(endall, function() {\n\t        resolve(true);\n\t      });\n\t    }\n\n\t\t\tbound = this.dataBind.call(this._base, data);\n\n\t\t\tassert_js(bound instanceof d3.selection,\n\t      'Invalid selection defined by `Layer#dataBind` method.');\n\t\t\tassert_js(bound.enter, 'Layer selection not properly bound.');\n\n\t\t\tentering = bound.enter();\n\t\t\tentering._chart = this._base._chart;\n\n\t\t\tevents = [\n\t\t\t\t{\n\t\t\t\t\tname: 'update',\n\t\t\t\t\tselection: bound\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'enter',\n\t\t\t\t\tselection: entering,\n\t\t\t\t\tmethod: this.insert\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'merge',\n\t\t\t\t\t// Although the `merge` lifecycle event shares its selection object\n\t\t\t\t\t// with the `update` lifecycle event, the object's contents will be\n\t\t\t\t\t// modified when d3.chart invokes the user-supplied `insert` method\n\t\t\t\t\t// when triggering the `enter` event.\n\t\t\t\t\tselection: bound\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: 'exit',\n\t\t\t\t\t// Although the `exit` lifecycle event shares its selection object\n\t\t\t\t\t// with the `update` and `merge` lifecycle events, the object's\n\t\t\t\t\t// contents will be modified when d3.chart invokes\n\t\t\t\t\t// `d3.selection.exit`.\n\t\t\t\t\tselection: bound,\n\t\t\t\t\tmethod: bound.exit\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tfor (var i = 0, l = events.length; i < l; ++i) {\n\t\t\t\teventName = events[i].name;\n\t\t\t\tselection = events[i].selection;\n\t\t\t\tmethod = events[i].method;\n\n\t\t\t\t// Some lifecycle selections modify shared state, so they must be\n\t\t\t\t// deferred until just prior to handler invocation.\n\t\t\t\tif (typeof method === 'function') {\n\t\t\t\t\tselection = method.call(selection);\n\t\t\t\t}\n\n\t\t\t\tif (selection.empty()) {\n\t        continue;\n\t\t\t\t}\n\n\t\t\t\t// Although `selection instanceof d3.selection` is more explicit,\n\t\t\t\t// it fails in IE8, so we use duck typing to maintain\n\t\t\t\t// compatability.\n\n\t\t\t\tassert_js(selection && selection instanceof d3.selection,\n\t        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n\t\t\t\thandlers = this._handlers[eventName];\n\n\t      if (handlers) {\n\t        for (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t          // Attach a reference to the parent chart so the selection\"s\n\t          // `chart` method will function correctly.\n\t          selection._chart = handlers[idx].chart || this._base._chart;\n\t          selection.call(handlers[idx].callback);\n\t        }\n\t      }\n\n\t      handlers = this._handlers[eventName + ':transition'];\n\n\t      if (handlers && handlers.length) {\n\t        selection = selection.transition();\n\t        for (tlen = handlers.length, tidx = 0; tidx < tlen; ++tidx) {\n\t          selection._chart = handlers[tidx].chart || this._base._chart;\n\t          selection.call(handlers[tidx].callback);\n\t          promises.push(new Promise(promiseCallback));\n\t        }\n\t      }\n\t      this.promise = Promise.all(promises);\n\t\t\t}\n\t\t}\n\t}\n\n\tvar layer_js = Layer;\n\n\tassert_js(d3, 'd3 js is required.');\n\n\t/**\n\t * Create a koto chart\n\t *\n\t * @constructor\n\t *\n\t * @param {d3.selection} selection The chart's \"base\" DOM node. This should\n\t *        contain any nodes that the chart generates.\n\t */\n\tclass Chart {\n\t  constructor(selection) {\n\t    this.base = selection; // Container for chart @type {d3.selection}.\n\t    this.hasDrawn = false; // Has this chart been drawn at lease once?\n\n\t    function baseExtend(dst, maps) {\n\t      var setDst = function (value, key) {\n\t          dst.set(key, value);\n\t      };\n\t      for (var i = 0, ii = maps.length; i < ii; ++i) {\n\t        var map = maps[i];\n\t        map.forEach(setDst);\n\t      }\n\t      return dst;\n\t    }\n\n\t    this.merge = {\n\t      configs: function(){\n\t        var merged = baseExtend(this.configs, arguments);\n\t        return merged;\n\t      }.bind(this),\n\t      accessors: function(){\n\t        var merged = baseExtend(this.accessors, arguments);\n\t        return merged;\n\t      }.bind(this)\n\t    };\n\n\t    // exposed properties\n\t    this.configs = new Map();\n\t    this.accessors = new Map();\n\t    this.promise = null;\n\n\t    // private\n\t    this._layers = new Map();\n\t    this._attached = new Map();\n\t    this._events = new Map();\n\n\t    // alias\n\t    this.c = this.config;\n\t    this.a = this.accessor;\n\t  }\n\n\t  /**\n\t   * A \"hook\" method that you may define to modify input data before it is used\n\t   * to draw the chart's layers and attachments. This method will be used by all\n\t   * sub-classes.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {Array} data Input data provided to @link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t  transform(data) { return data; }\n\n\t  /**\n\t   * A \"hook\" method that you may define to choose which mutation of the input\n\t   * data is sent to which of the attached charts (by name). This method will\n\t   * be used by all sub-classes. This only applies to charts that use the\n\t   * {@link Chart#attach} method.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param {String} data Name of attached chart defined in {@link Chart#attach}.\n\t   * @param {Array} data Input data provided to {@link Chart#draw}.\n\t   * @returns {mixed} Data to be used in drawing the chart's layers and\n\t   *                  attachments.\n\t   */\n\t  demux(name, data) { return data; }\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code before\n\t   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * Note 2: a `postDraw` event is also fired when appropriate;\n\t   *\n\t   * @param  {[type]} data [description]\n\t   * @return {[type]}      [description]\n\t   */\n\t  preDraw() {}\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code after\n\t   * {@link Chart#draw}. This will run everytime {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * @param  {[type]} data [description]\n\t   */\n\t  postDraw() {}\n\n\t  /**\n\t   * A \"hook\" method that will allow you to run some arbitrary code after\n\t   * {@link Chart#draw} is called AND after all transitions for all layers\n\t   * and attached charts have been completed. This will run everytime\n\t   * {@link Chart#draw} is called.\n\t   *\n\t   * Note: you will most likely never call this method directly, but rather\n\t   * include it as part of a chart definition, and then rely on d3.chart to\n\t   * invoke it when you draw the chart with {@link Chart#draw}.\n\t   *\n\t   * Note 2: a `postTransition` event is also fired when appropriate;\n\t   *\n\t   * @param  {[type]} data\n\t   */\n\t  postTransition() {}\n\n\t  /**\n\t   * Remove a layer from the chart.\n\t   *\n\t   * @param {String} name The name of the layer to remove.\n\t   * @returns {Layer} The layer removed by this operation.\n\t   */\n\t  unlayer(name) {\n\t    var layer = this.layer(name);\n\n\t    this._layers.delete(name);\n\t    delete layer._chart;\n\n\t    return layer;\n\t  }\n\n\t  /**\n\t   * Interact with the chart's {@link Layer|layers}.\n\t   *\n\t   * If only a `name` is provided, simply return the layer registered to that\n\t   * name (if any).\n\t   *\n\t   * If a `name` and `selection` are provided, treat the `selection` as a\n\t   * previously-created layer and attach it to the chart with the specified\n\t   * `name`.\n\t   *\n\t   * If all three arguments are specified, initialize a new {@link Layer} using\n\t   * the specified `selection` as a base passing along the specified `options`.\n\t   *\n\t   * The {@link Layer.draw} method of attached layers will be invoked\n\t   * whenever this chart's {@link Chart#draw} is invoked and will receive the\n\t   * data (optionally modified by the chart's {@link Chart#transform} method.\n\t   *\n\t   * @param {String} name Name of the layer to attach or retrieve.\n\t   * @param {d3.selection|Layer} [selection] The layer's base or a\n\t   *        previously-created {@link Layer}.\n\t   * @param {Object} [options] Options to be forwarded to {@link Layer|the Layer\n\t   *        constructor}\n\t   *\n\t   * @returns {Layer}\n\t   */\n\t  layer(name, selection, options) {\n\t    var _Chart = this;\n\t    var _layer;\n\n\t    if (arguments.length === 1) {\n\t      return this._layers.get(name);\n\t    }\n\n\t    // we are reattaching a previous layer, which the\n\t    // selection argument is now set to.\n\t    if (arguments.length === 2) {\n\n\t      if (selection instanceof layer_js) {\n\t        selection._chart = this;\n\t        this._layers.set(name, selection);\n\t        return this._layers.get(name);\n\n\t      } else {\n\t        assert_js(false, 'When reattaching a layer, the second argument must be a koto layer');\n\t      }\n\t    }\n\n\t    selection._chart = this;\n\n\t    _layer = new layer_js(selection, options);\n\n\t    _layer.remove = function () {\n\t      _Chart._layers.delete(name);\n\t      return this;\n\t    };\n\n\t    this._layers.set(name, _layer);\n\n\t    return _layer;\n\t  }\n\n\t  /**\n\t   * Register or retrieve an \"attachment\" Chart. The \"attachment\" chart's `draw`\n\t   * method will be invoked whenever the containing chart's `draw` method is\n\t   * invoked.\n\t   *\n\t   * @param {String} attachmentName Name of the attachment\n\t   * @param {Chart} [chart] koto to register as a mix in of this chart. When\n\t   *        unspecified, this method will return the attachment previously\n\t   *        registered with the specified `attachmentName` (if any).\n\t   *\n\t   * @returns {Chart} Reference to this chart (chainable).\n\t   */\n\t  attach(attachmentName, chart) {\n\t    if (arguments.length === 1) {\n\t      return this._attached.get(attachmentName);\n\t    }\n\n\t    this._attached.set(attachmentName, chart);\n\t    return chart;\n\t  }\n\n\t  /**\n\t   * Update the chart's representation in the DOM, drawing all of its layers and\n\t   * any \"attachment\" charts (as attached via {@link Chart#attach}).\n\t   *\n\t   * Note: The first time you call this method, the property `hasDrawn` will be\n\t   * set to true. This is helpful if you want to only run some code on the first\n\t   * time the chart is drawn.\n\t   *\n\t   * @param {Object} data Data to pass to the {@link Layer#draw|draw method} of\n\t   *        this cart's {@link Layer|layers} (if any) and the {@link\n\t   *        Chart#draw|draw method} of this chart's attachments (if any).\n\t   */\n\t  draw(rawData) {\n\t    var layer, attachmentData, promises = [];\n\n\t    var data = this.transform(rawData);\n\n\t    this.preDraw(data);\n\t    this.trigger('preDraw', data);\n\n\t    for (layer of this._layers.values()) {\n\t      layer.draw(data);\n\t      promises.push(layer.promise);\n\t    }\n\n\t    for (let [attachmentName, attachment] of this._attached.entries()) {\n\t      attachmentData = this.demux ? this.demux(attachmentName, data) : data;\n\t      attachment.draw(attachmentData);\n\t      promises.push(attachment.promise);\n\t    }\n\n\t    this.hasDrawn = true;\n\n\t    this.promise = Promise.all(promises);\n\n\t    this.postDraw();\n\t    this.trigger('postDraw', data);\n\n\t    this.promise.then(function () {\n\t      this.postTransition(data);\n\t      this.trigger('postTransition', data);\n\t    }.bind(this));\n\t  }\n\n\t  /**\n\t   * Function invoked with the context specified when the handler was bound (via\n\t   * {@link Chart#on} {@link Chart#once}).\n\t   *\n\t   * @callback ChartEventHandler\n\t   * @param {...*} arguments Invoked with the arguments passed to {@link\n\t   *         Chart#trigger}\n\t   */\n\n\t  /**\n\t   * Subscribe a callback function to an event triggered on the chart. See {@link\n\t   * Chart#once} to subscribe a callback function to an event for one occurence.\n\t   *\n\t   * @externalExample {runnable} chart-on\n\t   *\n\t   * @param {String} name Name of the event\n\t   * @param {ChartEventHandler} callback Function to be invoked when the event\n\t   *        occurs\n\t   * @param {Object} [context] Value to set as `this` when invoking the\n\t   *        `callback`. Defaults to the chart instance.\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  on(name, callback, context) {\n\t    var events;\n\t    if (this._events.has(name)) {\n\t      events = this._events.get(name);\n\t    } else {\n\t      events = new Set();\n\t    }\n\n\t    events.add({\n\t      callback: callback,\n\t      context: context || this,\n\t      _chart: this\n\t    });\n\n\t    this._events.set(name, events);\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Subscribe a callback function to an event triggered on the chart. This\n\t   * function will be invoked at the next occurance of the event and immediately\n\t   * unsubscribed. See {@link Chart#on} to subscribe a callback function to an\n\t   * event indefinitely.\n\t   *\n\t   * @externalExample {runnable} chart-once\n\t   *\n\t   * @param {String} name Name of the event\n\t   * @param {ChartEventHandler} callback Function to be invoked when the event\n\t   *        occurs\n\t   * @param {Object} [context] Value to set as `this` when invoking the\n\t   *        `callback`. Defaults to the chart instance\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable)\n\t   */\n\t  once(name, callback, context) {\n\t    var self = this;\n\t    var _once = function() {\n\t      self.off(name, _once);\n\t      callback.apply(this, arguments);\n\t    };\n\t    return this.on(name, _once, context);\n\t  }\n\n\t  /**\n\t   * Unsubscribe one or more callback functions from an event triggered on the\n\t   * chart. When no arguments are specified, *all* handlers will be unsubscribed.\n\t   * When only a `name` is specified, all handlers subscribed to that event will\n\t   * be unsubscribed. When a `name` and `callback` are specified, only that\n\t   * function will be unsubscribed from that event. When a `name` and `context`\n\t   * are specified (but `callback` is omitted), all events bound to the given\n\t   * event with the given context will be unsubscribed.\n\t   *\n\t   * @externalExample {runnable} chart-off\n\t   *\n\t   * @param {String} [name] Name of the event to be unsubscribed\n\t   * @param {ChartEventHandler} [callback] Function to be unsubscribed\n\t   * @param {Object} [context] Contexts to be unsubscribe\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  off(name, callback, context) {\n\n\t    // remove all events\n\t    if (arguments.length === 0) {\n\t      this._events.clear();\n\t      return this;\n\t    }\n\n\t    // remove all events for a specific name\n\t    if (arguments.length === 1) {\n\t      if (this._events.has(name)) {\n\t        this._events.get(name).clear();\n\t      }\n\t      return this;\n\t    }\n\n\t    // remove all events that match whatever combination of name, context\n\t    // and callback.\n\n\t    this._events.get(name).forEach((event, clone, map) => {\n\t      if ((callback && callback === clone.callback) ||\n\t          (context && context === clone.context)) {\n\t        map.delete(event);\n\t      }\n\t    });\n\n\t    return this;\n\t  }\n\n\t  /**\n\t   * Publish an event on this chart with the given `name`.\n\t   *\n\t   * @externalExample {runnable} chart-trigger\n\t   *\n\t   * @param {String} name Name of the event to publish\n\t   * @param {...*} arguments Values with which to invoke the registered\n\t   *        callbacks.\n\t   *\n\t   * @returns {Chart} A reference to this chart (chainable).\n\t   */\n\t  trigger(name, ...args) {\n\t    if (this._events.has(name)) {\n\t      this._events.get(name).forEach((event) => {\n\t        event.callback.call(event.context, ...args);\n\t      });\n\t    }\n\t    return this;\n\t  }\n\t  /**\n\t   * Get and set chart options (or configs)\n\t   *\n\t   * @param  {mixed} nameOrObject name of item getting or setting\n\t   *                              or its an object with key value pairs.\n\t   * @param  {mixed} value the value for config item witha that name.\n\t   * @return {mixed} if getting, its the value. if setting it is the chart instance.\n\t   */\n\t  config(nameOrObject, value) {\n\t    var key;\n\t    var definition;\n\t    var _Chart = this;\n\n\t    function setPercentage () {\n\t      function calcultePerecentage (arr, initialValue) {\n\t        var min = Math.min.call(null, arr.map(function (name) { return _Chart.config(name); }));\n\t        return initialValue / min;\n\t      }\n\n\t      if (definition.constrain === true) {\n\t        definition.percentage = calcultePerecentage(['width', 'height'], definition.value);\n\t      } else if (Array.isArray(definition.constrain)) {\n\t        definition.percentage = calcultePerecentage(definition.constrain, definition.value);\n\t      } else {\n\t        definition.percentage = calcultePerecentage([definition.constrain], definition.value);\n\t      }\n\t    }\n\n\t    if (arguments.length === 0) {\n\t      return this.configs;\n\t    }\n\n\t    if (arguments.length === 1) {\n\t      if (typeof nameOrObject === 'object') {\n\t        for (key in nameOrObject) {\n\t          if(this.configs.has(key)) {\n\t            definition = this.configs.get(key);\n\t            if (definition.hasOwnProperty('setter')) {\n\t              definition.value = definition.setter.call(definition, nameOrObject[key]);\n\t            } else {\n\t              definition.value = nameOrObject[key];\n\t            }\n\t            if (definition.hasOwnProperty('constrain')) {\n\t              setPercentage();\n\t            }\n\t            this.configs.set(key, definition);\n\t          } else {\n\t            console.warn(`config with name ${nameOrObject} is not defined.`);\n\t          }\n\t        }\n\t        return this;\n\t      }\n\n\t      assert_js(this.configs.has(nameOrObject), `${nameOrObject} is not a valid option.`);\n\t      definition = this.configs.get(nameOrObject);\n\t      if (definition.hasOwnProperty('getter')) {\n\t        return definition.getter.call(definition);\n\t      }\n\t      return definition.value;\n\t    }\n\n\t    if(arguments.length === 2) {\n\t      if (this.configs.has(nameOrObject)) {\n\t        definition = this.configs.get(nameOrObject);\n\t        if (definition.hasOwnProperty('setter')) {\n\t          definition.value = definition.setter.call(definition, value);\n\t        } else {\n\t          definition.value = value;\n\t        }\n\t        if (definition.hasOwnProperty('constrain')) {\n\t          setPercentage();\n\t        }\n\t        this.configs.set(nameOrObject, definition);\n\t      } else {\n\t        console.warn(`config with name ${nameOrObject} is not defined.`);\n\t      }\n\t      return this;\n\t    }\n\t  }\n\n\t  /**\n\t   * This will get or set any of the chart's accessors.\n\t   *\n\t   * @param  {String or Object} item If string, it will return the function for that accessor item.\n\t   *                                 If object, it will update that accessor with set function.\n\t   * @param  {function} [value] The function to update accessor item with.\n\t   * @return {object} The chart to preserve chainability.\n\t   */\n\t  accessor (item, value) {\n\t    var key;\n\t    if (arguments.length === 0) {\n\t      return this.accessors;\n\t    }\n\n\t    if (arguments.length === 1) {\n\t      if (typeof item === 'string') {\n\t        assert_js(this.accessors.has(item), `${item} is not a valid accessor.`);\n\t        return this.accessors.get(item);\n\t      } else {\n\t        for (key in item) {\n\t          this.accessors.set(key, item[key]);\n\t        }\n\t      }\n\t    } else {\n\t      this.accessors.set(item, value);\n\t    }\n\t    return this;\n\t  }\n\n\t  /**\n\t   * This will extend a chart by passing in an object of initialize function.\n\t   * @param  {Object || function} init Initialize function of object with initialize method.\n\t   * @return {Construtor}      Chart constructor\n\t   */\n\t  static extend(init) {\n\t    class chart extends this {\n\t      constructor(selection) {\n\t        var key;\n\t        super(selection);\n\n\t        if (typeof init === 'function') {\n\t          init.call(this);\n\t        } else {\n\t          for (key in init) {\n\t            this[key] = init[key];\n\t          }\n\t          this.initialize.call(this);\n\t        }\n\n\t      }\n\t    }\n\t    return chart;\n\t  }\n\t}\n\n\tvar _chart = Chart;\n\n\treturn _chart;\n\n}));\n"]}