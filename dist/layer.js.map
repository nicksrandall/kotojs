{"version":3,"sources":["layer.js"],"names":[],"mappings":"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","file":"layer.js","sourcesContent":["import kotoAssert from './assert.js';\n\nvar lifecycleRe = /^(enter|update|merge|exit)(:transition)?$/;\n\n/**\n * Loop through handers and call them on selection\n * @param {d3.selection} selection The node to run the handler on.\n *                                  it could be an `d3.transition` selection\n * @param {lifecycle event} handlers A function to call for that layers named\n *                           \t\t\t\t lifecycle event.\n */\nfunction selectionHandler (selection, handlers) {\n\tvar idx, len;\n\tfor (idx = 0, len = handlers.length; idx < len; ++idx) {\n\t\t// Attach a reference to the parent chart so the selection's\n\t\t// `chart` method will function correctly.\n\t\tselection._chart = handlers[idx].chart || this._base._chart;\n\t\tselection.call(handlers[idx].callback);\n\t}\n}\n\n/**\n * Create a layer using the provided `base`. The layer instance is *not*\n * exposed to d3.chart users. Instead, its instance methods are mixed in to the\n * `base` selection it describes; users interact with the instance via these\n * bound methods.\n *\n * @private\n * @class\n *\n * @param {d3.selection} base The containing DOM node for the layer.\n */\nclass Layer {\n\tconstructor(base) {\n\t\tthis._base = base;\n\t\tthis._handlers = {};\n\t}\n\n\t/**\n\t * Invoked by {@link Layer#draw} to join data with this layer's DOM nodes. This\n\t * implementation is \"virtual\"--it *must* be overridden by Layer instances.\n\t *\n\t * @param {Array} data Value passed to {@link Layer#draw}\n\t */\n\tdataBind() {\n\t\tkotoAssert(false, 'Layers must specify a dataBind method.');\n\t}\n\n\t/**\n\t * Invoked by {@link Layer#draw} in order to insert new DOM nodes into this\n\t * layer's `base`. This implementation is \"virtual\"--it *must* be overridden by\n\t * Layer instances.\n\t */\n\tinsert() {\n\t\tkotoAssert(false, 'Layers must specify an `insert` method.');\n\t}\n\n\t/**\n\t * Subscribe a handler to a \"lifecycle event\". These events (and only these\n\t * events) are triggered when {@link Layer#draw} is invoked--see that method\n\t * for more details on lifecycle events.\n\t *\n\t * @param {String} eventName Identifier for the lifecycle event for which to\n\t *        subscribe.\n\t * @param {Function} handler Callback function\n\t *\n\t * @returns {Chart} Reference to the layer instance (chaining).\n\t */\n\ton(eventName, handler, options) {\n\t\toptions = options || {};\n\n\t\tkotoAssert(lifecycleRe.test(eventName),\n\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\tif (!(eventName in this._handlers)) {\n\t\t\tthis._handlers[eventName] = [];\n\t\t}\n\t\tthis._handlers[eventName].push({\n\t\t\tcallback: handler,\n\t\t\tchart: options.chart || null\n\t\t});\n\t\treturn this;\n\t}\n\n\t/**\n\t * Unsubscribe the specified handler from the specified event. If no handler is\n\t * supplied, remove *all* handlers from the event.\n\t *\n\t * @param {String} eventName Identifier for event from which to remove\n\t *        unsubscribe\n\t * @param {Function} handler Callback to remove from the specified event\n\t *\n\t * @returns {Chart} Reference to the layer instance (chaining).\n\t */\n\toff(eventName, handler) {\n\n\t\tvar handlers = this._handlers[eventName];\n\t\tvar idx;\n\n\t\tkotoAssert(lifecycleRe.test(eventName),\n\t\t\t`Unrecognized lifecycle event name specified to 'Layer#on': '${eventName}'.`);\n\n\t\tif (!handlers) {\n\t\t\treturn this._base;\n\t\t}\n\n\t\tif (arguments.length === 1) {\n\t\t\thandlers.length = 0;\n\t\t\treturn this._base;\n\t\t}\n\n\t\tfor (idx = handlers.length - 1; idx > -1; --idx) {\n\t\t\tif (handlers[idx].callback === handler) {\n\t\t\t\thandlers.splice(idx, 1);\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Render the layer according to the input data: Bind the data to the layer\n\t * (according to {@link Layer#dataBind}, insert new elements (according to\n\t * {@link Layer#insert}, make lifecycle selections, and invoke all relevant\n\t * handlers (as attached via {@link Layer#on}) with the lifecycle selections.\n\t *\n\t * - update\n\t * - update:transition\n\t * - enter\n\t * - enter:transition\n\t * - exit\n\t * - exit:transition\n\t *\n\t * @param {Array} data Data to drive the rendering.\n\t */\n\tdraw(data) {\n\t\tvar bound,\n\t\t\tentering,\n\t\t\tevents,\n\t\t\tselection,\n\t\t\tmethod,\n\t\t\thandlers,\n\t\t\ttransitionHandlers,\n\t\t\teventName;\n\n\t\tbound = this.dataBind.call(this._base, data);\n\n\t\tkotoAssert(bound instanceof d3.selection,\n      'Invalid selection defined by `Layer#dataBind` method.');\n\t\tkotoAssert(bound.enter, 'Layer selection not properly bound.');\n\n\t\tentering = bound.enter();\n\t\tentering._chart = this._base._chart;\n\n\t\tevents = [\n\t\t\t{\n\t\t\t\tname: 'update',\n\t\t\t\tselection: bound\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'enter',\n\t\t\t\tselection: entering,\n\t\t\t\tmethod: this.insert\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'merge',\n\t\t\t\t// Although the `merge` lifecycle event shares its selection object\n\t\t\t\t// with the `update` lifecycle event, the object's contents will be\n\t\t\t\t// modified when d3.chart invokes the user-supplied `insert` method\n\t\t\t\t// when triggering the `enter` event.\n\t\t\t\tselection: bound\n\t\t\t},\n\t\t\t{\n\t\t\t\tname: 'exit',\n\t\t\t\t// Although the `exit` lifecycle event shares its selection object\n\t\t\t\t// with the `update` and `merge` lifecycle events, the object's\n\t\t\t\t// contents will be modified when d3.chart invokes\n\t\t\t\t// `d3.selection.exit`.\n\t\t\t\tselection: bound,\n\t\t\t\tmethod: bound.exit\n\t\t\t}\n\t\t];\n\n\t\tfor (var i = 0, l = events.length; i < l; ++i) {\n\t\t\teventName = events[i].name;\n\t\t\tselection = events[i].selection;\n\t\t\tmethod = events[i].method;\n\n\t\t\t// Some lifecycle selections modify shared state, so they must be\n\t\t\t// deferred until just prior to handler invocation.\n\t\t\tif (typeof method === 'function') {\n\t\t\t\tselection = method.call(selection);\n\t\t\t}\n\n\t\t\tif (selection.empty()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Although `selection instanceof d3.selection` is more explicit,\n\t\t\t// it fails in IE8, so we use duck typing to maintain\n\t\t\t// compatability.\n\n\t\t\tkotoAssert(selection && selection instanceof d3.selection,\n        `Invalid selection defined for ${eventName} lifecycle event.`);\n\n\t\t\thandlers = this._handlers[eventName];\n\n\t\t\tif (handlers) {\n\t\t\t\tselectionHandler.call(this, selection, handlers);\n\t\t\t}\n\n\t\t\ttransitionHandlers = this._handlers[eventName + ':transition'];\n\n\t\t\tif (handlers && handlers.length) {\n\t\t\t\tselection = selection.transition();\n\t\t\t\tselectionHandler.call(this, selection, transitionHandlers);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport default Layer;\n"],"sourceRoot":"/source/"}